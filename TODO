* Issue: release number across runners.
  If a package is build on one runner the release starts at 1 and
  increases. If the package is picked up by another runner it will
  use the release state of this runner which can be 1 or >1 if
  that package has been built by that runner in the past.
  Thus the release number is non deterministic at the moment.
  No good solution so far, don't want to interconnect services

* There are 3 topics in Kafka so far
  cb-request
  cb-response
  cb-info
  They need to be created with the instructions from here
  https://docs.aws.amazon.com/msk/latest/developerguide/create-topic.html
  NOTE: In Amazon access to Kafka is by default only possible within the VPC

* Write a dependency checker cb-solve based on satsolver. On a regular schedule
  resolve dependencies in parallell and trigger a rebuild by sending a request
  to the cb_request topic such that the scheduler rebuilds

* Write a cb_info tool to check for conditions e.g state of a build,
  log file, etc etc via the cb-info topic

* Write a client program cb-client which allows to e.g send a manual
  rebuild to the cb_request topic

* Create runner and fetcher/solver images for the cloud (Amazon)
  There must be at least one runner(cb-scheduler/cb-prepare/cb-run)
  and one fetcher/solver(cb-fetch/cb-solve) for the system to work.
  Also required is a running and accessible kafka broker.
  ==> The system should scale with more runner
  ==> Maybe fetcher and solver needs to be separated into extra
      images such that more solver increases performance
